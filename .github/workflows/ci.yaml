name: CI

on:
  push:
    branches:
      - "**"
    tags:
      - "release-candidate"

jobs:
  cleanup:
    runs-on: ubuntu-20.04
    steps:
      - name: Clean Up Release Candiate Tag
        if: ${{ github.ref == 'refs/tags/release-candidate' }}
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          tag_name: release-candidate
          delete_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install Requirements
        run: |
          pip install -r requirements.txt
      - name: Build Wheel
        run: |
          poetry build
      - name: Upload Wheel
        uses: actions/upload-artifact@v3
        with:
          name: wheel
          path: dist
  tests:
    strategy:
      matrix:
        python: ["3.11", "3.10", "3.9", "3.8", "3.7"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python}}
          cache: "pip"
      - name: Install Requirements
        run: |
          pip install -r requirements.txt
          poetry config virtualenvs.create false
          poetry install
      - name: Run Unit Tests
        run: |
          tasks tests
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install Requirements
        run: |
          pip install -r requirements.txt
          poetry config virtualenvs.create false
          poetry install
      - name: Run Unit Tests
        run: |
          tasks lint
  release:
    runs-on: ubuntu-latest
    needs: [build, lint, tests]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install Requirements
        run: |
          pip install -r requirements.txt
      - name: Download Wheel
        uses: actions/download-artifact@v3
        with:
          name: wheel
          path: dist
      - name: Check Commit Messages
        run: |
          release check-commit-messages
      - name: Generate Changelog
        run: |
          release changelog > changelog.md
      - name: Delete Previous Main Github Release
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          gh release delete main --cleanup-tag --yes || echo "no release"
          git tag -d main || echo "no tag"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish Main Github Release
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          gh release create main ./dist/*.whl -F changelog.md --prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish Github Release
        if: ${{ github.ref == 'refs/tags/release-candidate' }}
        run: |
          gh release create v`release version` ./dist/*.whl -F changelog.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish PyPI
        if: ${{ github.ref == 'refs/tags/release-candidate' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository_url: https://upload.pypi.org/legacy/
          skip_existing: false
